trigger:
  - main

pool:
  vmImage: "ubuntu-latest"

variables:
  - group: aws-creds
  - name: awsRegion
    value: "us-east-1"
  - name: ecrRepository
    value: "638067550830.dkr.ecr.us-east-1.amazonaws.com/2048"

stages:
  - stage: Build
    jobs:
      - job: BuildAndPush
        steps:
          - checkout: self

          - script: |
              set -e
              echo "✅ Checking AWS environment variables..."
              echo "AWS_ACCESS_KEY_ID is $AWS_ACCESS_KEY_ID"
              echo "AWS_DEFAULT_REGION is $AWS_DEFAULT_REGION"

              echo "🔐 Logging in to ECR..."
              aws ecr get-login-password --region $(awsRegion) | docker login --username AWS --password-stdin $(ecrRepository)

              echo "⚙️ Building Docker image..."
              docker build -t game-2048:$(Build.BuildId) .

              echo "🏷️ Tagging Docker image..."
              docker tag game-2048:$(Build.BuildId) $(ecrRepository):$(Build.BuildId)

              echo "🚀 Pushing Docker image to ECR..."
              docker push $(ecrRepository):$(Build.BuildId)
            displayName: "Build & Push Docker Image"
            env:
              AWS_ACCESS_KEY_ID: $(AWS-ACCESS-KEY-ID)
              AWS_SECRET_ACCESS_KEY: $(AWS-SECRET-ACCESS-KEY)
              AWS_DEFAULT_REGION: $(AWS-DEFAULT-REGION)

          - script: |
              echo "⬇️ Installing Trivy..."
              sudo apt-get update
              sudo apt-get install -y wget apt-transport-https gnupg lsb-release
              wget -qO - https://aquasecurity.github.io/trivy-repo/deb/public.key | sudo apt-key add -
              echo deb https://aquasecurity.github.io/trivy-repo/deb $(lsb_release -sc) main | sudo tee -a /etc/apt/sources.list.d/trivy.list
              sudo apt-get update
              sudo apt-get install -y trivy
              echo "✅ Trivy installed successfully!"
            displayName: "Install Trivy"

          - script: |
              echo "🔎 Scanning Docker image..."
              trivy image --exit-code 1 --severity HIGH,CRITICAL $(ecrRepository):$(Build.BuildId)
            displayName: "Scan Docker Image"
            env:
              AWS_ACCESS_KEY_ID: $(AWS-ACCESS-KEY-ID)
              AWS_SECRET_ACCESS_KEY: $(AWS-SECRET-ACCESS-KEY)
              AWS_DEFAULT_REGION: $(AWS-DEFAULT-REGION)

          - script: |
              echo "$(Build.BuildId)" > imageTag.txt
              echo "✅ Image tag $(Build.BuildId) written to imageTag.txt"
            displayName: "Write Image Tag to File"

          - publish: imageTag.txt
            artifact: imageTag
            displayName: "Publish Image Tag Artifact"
