trigger: none

resources:
  pipelines:
    - pipeline: buildPipeline
      source: aravindav.eks-2048-game-pipeline-build
      trigger: true

pool:
  vmImage: "ubuntu-latest"

variables:
  - group: aws-creds
  - name: awsRegion
    value: "us-east-1"
  - name: ecrRepository
    value: "638067550830.dkr.ecr.us-east-1.amazonaws.com/2048"
  - name: clusterName
    value: "my-eks-cluster"
  - name: helmRelease
    value: "game-2048"
  - name: helmChartPath
    value: "./helm/2048"

stages:
  - stage: Deploy
    jobs:
      - job: DeployToEKS
        steps:
          - download: buildPipeline
            artifact: imageTag

          - checkout: self

          - script: |
              echo "Exporting AWS credentials..."
              export AWS_ACCESS_KEY_ID=$(AWS-ACCESS-KEY-ID)
              export AWS_SECRET_ACCESS_KEY=$(AWS-SECRET-ACCESS-KEY)
              export AWS_DEFAULT_REGION=$(AWS-DEFAULT-REGION)

              echo "âœ… Verifying AWS identity..."
              aws sts get-caller-identity

              echo "ðŸ”„ Updating kubeconfig..."
              aws eks --region $(awsRegion) update-kubeconfig --name $(clusterName)

              echo "ðŸ”Ž Testing kubectl connectivity..."
              kubectl get svc

              echo "âž• Adding Prometheus community repo..."
              helm repo add prometheus-community https://prometheus-community.github.io/helm-charts
              helm repo update

              echo "ðŸš€ Installing Prometheus & Grafana..."
              helm upgrade --install kube-prometheus-stack prometheus-community/kube-prometheus-stack \
                --namespace monitoring --create-namespace \
                --set grafana.service.type=LoadBalancer \
                --set prometheus.service.type=LoadBalancer
            displayName: "Install Prometheus & Grafana with Helm"
            env:
              AWS_ACCESS_KEY_ID: $(AWS-ACCESS-KEY-ID)
              AWS_SECRET_ACCESS_KEY: $(AWS-SECRET-ACCESS-KEY)
              AWS_DEFAULT_REGION: $(AWS-DEFAULT-REGION)

          - script: |
              echo "ðŸš¢ Deploying app with Helm..."
              helm upgrade --install $(helmRelease) $(helmChartPath) \
                --set image.repository=$(ecrRepository) \
                --set image.tag=$(imageTag) \
                --set image.pullPolicy=Always \
                --namespace default
            displayName: "Deploy to EKS with Helm"
            env:
              AWS_ACCESS_KEY_ID: $(AWS-ACCESS-KEY-ID)
              AWS_SECRET_ACCESS_KEY: $(AWS-SECRET-ACCESS-KEY)
              AWS_DEFAULT_REGION: $(AWS-DEFAULT-REGION)

          - script: |
              echo "âœ… Checking rollout status..."
              kubectl rollout status deployment/$(helmRelease) --namespace default

              echo "ðŸ”Ž Listing pods..."
              kubectl get pods -n default
            displayName: "Verify Deployment"
            env:
              AWS_ACCESS_KEY_ID: $(AWS-ACCESS-KEY-ID)
              AWS_SECRET_ACCESS_KEY: $(AWS-SECRET-ACCESS-KEY)
              AWS_DEFAULT_REGION: $(AWS-DEFAULT-REGION)

  - stage: Notify
    dependsOn: Deploy
    condition: succeeded()
    jobs:
      - job: Notify
        steps:
          - script: |
              echo "ðŸŽ‰ âœ… Deployment completed successfully! Access your app and monitoring dashboards."
            displayName: "Notify Team"
